
{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Install WordPress server and database fronted by firewall.",

  "Mappings" : {
      "Defaults" : {
          "Static" : { "FirewallAMI" : "ami-435a6f73" }
      }
  },

  "Parameters": {
    "FWInstancePassword": {
      "Description": "Firewall's admin password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "40",
      "NoEcho": "true"
    },

     "PAVMAWSKeyName": {
      "Description": "Name of the EC2 KeyPair created by VM helper that will allow SSH access to the PA-VM-AWS",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "ServerKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the server (you should have private key)",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },

    "VMseriesHelperSNSTopicARN": {
      "Type": "String",
      "Description" : "VMSeriesHelper SNS Topic ARN. (Hint: It can be found as the output of the VMSH stack creation)"
    }
  },

  "Resources": {
    "NewVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [{ "Key": "Name", "Value": "PAN Test Drive" }]
      }
    },

    "PublicElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "ManagementElasticIP": {
       "Type" : "AWS::EC2::EIP",
       "Properties" : {
          "Domain" : "vpc"
       },
       "DependsOn": [ "NewVPC" ]
    },

    "NewDBSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "us-west-2a",
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "PAN Test Drive" }]
      },
      "DependsOn": "NewVPC"
    },

    "NewPublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": "us-west-2a",
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "PAN Test Drive" }]
      },
      "DependsOn": "NewVPC"
    },

    "NewWebSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "us-west-2a",
        "VpcId": {"Ref": "NewVPC"},
        "Tags": [{ "Key": "Name", "Value": "PAN Test Drive" }]
      },
      "DependsOn": "NewVPC"
    },

    "igweb3def8e": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{ "Key": "Name", "Value": "PAN Test Drive" }]
      }
    },

    "dopt21c7d043": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "us-west-2.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },

    "aclb765d6d2": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb059a2460": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },

    "rtb049a2461": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"}
      }
    },


    "FWManagementNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 MGMT",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.99",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 MGMT"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPublicNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/1",
        "SubnetId": {"Ref": "NewPublicSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.0.100",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 E1/1"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate12NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/2",
        "SubnetId": {"Ref": "NewWebSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.1.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name","Value": "WP AWS FW1 E1/2"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWPrivate13NetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "AWS FW1 E1/3",
        "SubnetId": {"Ref": "NewDBSubnet"},
        "SourceDestCheck": "false",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": "10.0.2.11",
            "Primary": "true"
          }
        ],
        "GroupSet": [{"Ref": "sgWideOpen"}],
        "Tags": [{"Key": "Name", "Value": "WP AWS FW1 E1/3"}]
      },
      "DependsOn": [ "sgWideOpen" ]
    },

    "FWEIPMAnagementAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "ManagementElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface" }
       },
       "DependsOn": [ "FWManagementNetworkInterface", "ManagementElasticIP" ]
    },

    "FWEIPPublicAssociation": {
       "Type": "AWS::EC2::EIPAssociation",
       "Properties": {
          "AllocationId": { "Fn::GetAtt": [ "PublicElasticIP", "AllocationId" ] },
          "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface" }
       },
       "DependsOn": [ "FWPublicNetworkInterface", "PublicElasticIP" ]
    },

    "AWSMonitorUser" : {
     "Type" : "AWS::IAM::User"
    },

    "AWSMonitorUserKey" : {
     "Type" : "AWS::IAM::AccessKey",
     "Properties" : {
          "UserName" : {"Ref": "AWSMonitorUser"}
      }
    },

    "AWSMonitorPolicy": {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
          "PolicyName" : "AWSMonitoring",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect": "Allow",
              "Action": "ec2:Describe*",
              "Resource": "*"
            } ]
          },
          "Users" : [ { "Ref" : "AWSMonitorUser" } ]
      }
    },

    "sgWideOpen": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Wide open security group",
        "VpcId": {"Ref": "NewVPC"},
         "Tags": [{"Key": "Name","Value": "Lab External SG"}],
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress" : [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
          ]
      }
    },

    "acl1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "acl2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "aclb765d6d2"
        }
      }
    },

    "subnetacl1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewDBSubnet"}
      }
    },
    "subnetacl2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },
    "subnetacl3": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {"Ref": "aclb765d6d2"},
        "SubnetId": {"Ref": "NewWebSubnet"}
      }
    },

    "gw1": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "InternetGatewayId": {"Ref": "igweb3def8e"}
      }
    },

    "subnetroute2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "rtb049a2461"},
        "SubnetId": {"Ref": "NewPublicSubnet"}
      }
    },

    "route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb059a2460"},
        "GatewayId": {"Ref": "igweb3def8e"}
      },
      "DependsOn": "gw1"
    },

    "route2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {"Ref": "rtb049a2461"},
        "GatewayId": {"Ref": "igweb3def8e"}
      },
      "DependsOn": "gw1"
    },

    "dchpassoc1": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {"Ref": "NewVPC"},
        "DhcpOptionsId": {"Ref": "dopt21c7d043"}
      }
    },

    "FWInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "EbsOptimized": "true",
        "ImageId": { "Fn::FindInMap" : [ "Defaults", "Static", "FirewallAMI" ] },
        "InstanceType": "c3.xlarge",
        "KeyName": { "Ref": "PAVMAWSKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "WP VM-Series Firewall" }],
        "NetworkInterfaces": [
          {
            "NetworkInterfaceId": { "Ref": "FWManagementNetworkInterface"},
            "DeviceIndex": 0
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPublicNetworkInterface"},
            "DeviceIndex": 1
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate12NetworkInterface"},
            "DeviceIndex": 2
          },
          {
            "NetworkInterfaceId": { "Ref": "FWPrivate13NetworkInterface"},
            "DeviceIndex": 3
          }
        ]
      },
      "DependsOn": [ "FWPublicNetworkInterface", "FWPrivate12NetworkInterface", "FWPrivate13NetworkInterface", "NewPublicSubnet" ]
    },

    "WPDBServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-177b5b27",
        "InstanceType": "t1.micro",
        "KernelId": "aki-fc8f11cc",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{ "Key": "Name", "Value": "WP DB Server 1" }],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "NewDBSubnet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.101",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWideOpen"
              }
            ]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#! /bin/bash\n",

            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",

            "echo \"export new_routers='10.0.2.11'\" >> /etc/dhcp/dhclient-enter-hooks.d/aws-default-route\n",
            "ifdown eth0\n",
            "ifup eth0\n"
        ]]}
      }},
      "DependsOn": [ "NewDBSubnet", "sgWideOpen" ]
    },

    "WPWebInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-157b5b25",
        "InstanceType": "t1.micro", 
        "KernelId": "aki-fc8f11cc",
        "KeyName": { "Ref": "ServerKeyName" },
        "Monitoring": "false",
        "Tags": [{"Key": "Name","Value": "WP Web Server 1"}],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "NewWebSubnet"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.101",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWideOpen"
              }
            ]
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#! /bin/bash\n",

            "exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",

            "cp /etc/wordpress/config-52.10.68.86.php /etc/wordpress/config-",
              { "Ref": "PublicElasticIP" }, 
              ".php\n",
            "echo \"export new_routers='10.0.1.11'\" >> /etc/dhcp/dhclient-enter-hooks.d/aws-default-route\n",
            "ifdown eth0\n",
            "ifup eth0\n"
          ]]}
        }
      },
      "DependsOn": [ "NewWebSubnet", "sgWideOpen", "PublicElasticIP" ]
    },

    "VMSeriesHelper" : {
       "Type": "Custom::VMSeriesHelper",
       "Version" : "0.1",
       "DeletionPolicy": "Retain",
       "Properties" : {
          "ServiceToken": { "Ref": "VMseriesHelperSNSTopicARN" },
          "PAVMAWSEIPMgmt" : { "Fn::GetAtt": [ "FWInstance", "PublicIp" ]},
          "admin_password": { "Ref": "FWInstancePassword" },
          "IgnorePlaybookFailure": "no",
          "PlaybookURL": "https://s3-us-west-1.amazonaws.com/mycftfile/test-drive-playbook_V1.1.yml",
          "VPCId": {"Ref" : "NewVPC"},
          "AWSMonitorUserAccessKey": { "Ref": "AWSMonitorUserKey" },
          "AWSMonitorUserSecretAccessKey": { "Fn::GetAtt": ["AWSMonitorUserKey", "SecretAccessKey"] },
          "AWSMonitorSource": { "Fn::Join": [".", ["ec2", { "Ref": "AWS::Region" }, "amazonaws", "com" ]]}
       },
       "DependsOn": ["FWEIPPublicAssociation", "AWSMonitorUserKey" ]
    }
  },

  "Outputs": {
    
    "FirewallManagementURL": {
      "Description": "VM-Series management interface URL",
      "Value": { "Fn::Join" : ["", [
        "https://",
        { "Fn::GetAtt": [ "FWInstance", "PublicIp" ]}
      ]]}
    },

    "FirewallAdminPassword": {
      "Value": { "Ref": "FWInstancePassword" },
      "Description": "Admin password"
    },

    "WordpressURL": {
      "Description": "Wordpress server",
      "Value": { "Fn::Join" : ["", [
        "http://",
        { "Ref": "PublicElasticIP" },
        "/wordpress"
      ]]}
    },

    "WebserverSSH": {
      "Description": "SSH to the webserver",
      "Value": { "Fn::Join" : ["", [
        "ssh ubuntu@",
        { "Ref": "PublicElasticIP" },
        " -p 221 -i ",
        { "Ref": "ServerKeyName" }
      ]]}
    },

    "DatabaseSSH": {
      "Description": "SSH to the DB",
      "Value": { "Fn::Join" : ["", [
        "ssh ubuntu@",
        { "Ref": "PublicElasticIP" },
        " -p 222  -i ",
        { "Ref": "ServerKeyName" }
      ]]}
    }
  }
}